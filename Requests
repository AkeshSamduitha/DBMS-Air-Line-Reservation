# Request No:

# Description: What the Rq Do

# Request Type: GET/POST/DELETE/UPDATE

# Request URL: lo

# Response: What is given in Response

# SQL Query: SQL query to Access DB

Request No: 01✅
Description: Given a flight no, all passengers travelling in it (next immediate flight) below age 18, above age 18
Request Type: GET
Request URL: http://localhost:3000/api/getPassengersByFlight
Input: {"Flight_ID": "F1"}
Response:{Above, Below}
SQL Query:Select (SELECT COUNT(_) FROM tickets WHERE Adult_or_Child LIKE '%A%' AND Flight = "F1") as Above_18, (SELECT COUNT(_) FROM tickets WHERE Adult_or_Child LIKE '%C%'AND Flight = "F1") as Below_18;

Request No: 02✅
Description: Given a date range, number of passengers travelling to a given destination
Request Type: GET
Request URL: http://localhost:3000/api/getPassengersByDestination
input:
{
"Destination_ID": "JFK",
"From_Date": "2022-01-01",
"To_Date": "2023-01-31"
}
Response: {count}
SQL Query: Select count(\*) FROM Tickets WHERE Flight IN (Select Flight_ID from Flights Where (Route IN (Select Route_ID FROM routes WHERE Destination_ID = "JFK" ) AND Date_of_travel BETWEEN "2022-01-01" AND "2023-01-31"));

Request No: 03✅
Description: Given a date range, number of bookings by each passenger type
Request Type: GET
Request URL: http://localhost:3000/api/getBookingsByPassengerType
input: {
"From_Date": "2022-01-01",
"To_Date": "2023-01-31"
}
Response: {passenger_type, count}
SQL Query: SELECT (SELECT count(_) FROM tickets, Users WHERE Users.PID = tickets.PID AND Time_of_booking BETWEEN "2022-01-01" AND "2023-01-31" AND User_type LIKE '%G%') AS Guests,
(SELECT count(_) FROM tickets, Users WHERE Users.PID = tickets.PID AND Time_of_booking BETWEEN "2022-01-01" AND "2023-01-31" AND User_type LIKE '%R%') AS Registered ;

Request No: 04 ✅
Description: Given origin and destination, all past flights, status, passenger counts data
Request Type: GET/POST/DELETE/UPDATE
Request URL: http://localhost:3000/api/getPastFlights
input: {
"Origin_ID": "JFK",
"Destination_ID": "LAX"
}
Response: {Flight_ID, Date_of_travel, Flight_Status, count}
SQL Query:
Create view Airplanes_w_seasts as
SELECT Airplane_ID, (seat_count_First_Class+seat_count_Economy_Class+seat_count_Buisness_Class) as seat_count
FROM Airplanes, Airplane_Models
WHERE Airplanes.Model = Airplane_Models.Model_ID;

SELECT Flight_ID, Airplane, Date_of_travel, Dep_time, Arr_time, (seat_count-(Tickets_Remaining_Business_Class+Tickets_Remaining_Economy_Class+Tickets_Remaining_First_Class)) as passenger_count
FROM (Flights Left Join Airplanes_w_seasts on Airplane = Airplane_ID)
WHERE route In (select route_ID
FROM routes
WHERE Origin_ID = "BIA" AND Destination_ID = "JFK");

Drop view Airplanes_w_seasts;

Request No: 05✅
Description: Total revenue generated by each Aircraft type
Request Type: GET
Request URL: http://localhost:3000/api/getRevenueByAircraftType
input: {
"Model" : "Airbus"
"Brand": "A350"
}
Response: {Model, Brand, Revenue}
SQL Query:
Select MODEL_ID, Model, Brand, Revenue
From Flights Left Join (select Airplane_ID, Model_ID, airplane_models.Model, Brand
from Airplanes LEFT JOIN airplane_models
on Model_ID = airplanes.Model) as A
on Airplane = Airplane_ID
GROUP by Model_ID;

Request No: 06
Description: Login
Request Type: GET
Request URL: http://localhost:3000/Auth/login
input:
{
Email: "Mr",
Password: "John",
}
Response: {මොනවද ඕන දෙනව}
SQL Query: Select \* from users, Registered_Users where Email = 'Email' and Password = 'Password' users.PID = Registered_Users.PID;

Request No: 07✅
Description: Register
Request Type: POST
Request URL: http://localhost:3000/Auth/Register
input:
{
Title: "Mr",
First_Name: "John",
Last_Name: "Doe",
Email: "Huu@mymail.com",
Telephone: "123",
Country: "USA",
Username: "John",
Password: "123",
Date_of_Birth: "YYYY-MM-DD",
Address: "123",
}
Response: No Response
SQL Query: Call New_Registred_User(Title, First_Name, Last_Name, Email, Telephone, Country, Username, Password, Date_of_Birth, Address);

Request No: 08 ✅
Description: When From, To and Date Range(From_Date,To_Date) is given then available Flights will be shown to the user
Request Type: GET
Request URL: Http:/localhost:3000/api/getFlights
Input:
{  
 "From": "Location01",  
 "To": "Location02",  
 "From_Date": "FromDate",
"To_Date": "ToDate"
}  
Response: {Flight_ID, Date_of_travel, Dep_time, Arr_time, Tickets_remaining_F, Tickets_remaining_B, Tickets_remaining_E, Flight_Status }
SQL Query:
Select Flight_ID, Date_of_travel, Dep_time, Arr_time, Tickets_remaining_F, Tickets_remaining_B, Tickets_remaining_E, Flight_Status
From Flights
where Route = (
Select Route_ID
From Routes
Where Origin_ID = 'From' AND Destination_ID = 'To' AND Date_of_travel BETWEEN 'From_Date' AND 'To_Date'
order by Date_of_travel
) AND Tockets_remaining > 0;

Request No: 09 ✅
Description: Available Seats
Request Type: Get
Request URL: http://localhost:3000/api/AvailableSeats
input: {"Flight_ID": "A1"}
Response: {Class, seat_ID}
SQL Query:
Select Class, seat_ID
from tickets
where Flight_ID = 'Flight_ID'
Order by Class, seat_ID;

Request No: 10 ✅
Description: Flight Booking
Request Type: Post
Request URL: http://localhost:3000/api/BookFlight
input: {
"Flight_ID": "A1",
"Class": "F",
"seat_ID": "A1",
"PID": "123",
"Adult_or_Child": "A"}
Response: NONE
SQL Query: CALL new_ticket('Flight_ID', 'Class', "seat_ID", 'PID', 'Adult_or_Child' );

Request No: 11 ✅
Description: Cancel Booking
Request Type: Post
Request URL: http://localhost:3000/api/CancelBooking
input:
{
"Ticket_ID": "xxxx"
}
Response: NONE
SQL Query: CALL cancel_ticket("Ticket_ID")

Request No: 12 ✅
Description: Seat Price
Request Type: Get
Request URL: http://localhost:3000/api/SeatPrice
input: {
'PID': "11"
'Route' : "R1"
'Class': "F"

}
response: {'Price': "100"}
SQL Query: Ticket_Price('PID', 'Route', 'Class') //Function

Request No: 13✅
Description: Guest User Login
Request Type: Post
Request URL: http://localhost:3000/api/GuestLogin
input:
{
Title: "Mr",
First_Name: "John",
Last_Name: "Doe",
Email: "Huu@mymail.com",
Telephone: "123",
Country: "USA",
}
Response: No response
SQL Query: INSERT INTO USERS(Title, First_Name, Last_Name, Email, Telephone, Country) VALUES (Title, First_Name, Last_Name, Email, Telephone, Country);

Request No: 14✅
Description: Check Flight Status
Request Type: Get
Request URL: http://localhost:3000/api/FlightStatus
Input:
{
"Flight_ID": "F1"
}
Response: {Flight_Status}
SQL Query: Select Flight_Status from Flights where Flight_ID = 'Flight_Number';

Request No: 15 ✅
Description: Get Destinations
Request Type: Get
Request URL: http://localhost:3000/api/Destinations
Input: None
Response: {Airport_code, Airport_namee, Location}
Query: select \* from Airports;

Request No: 16 ✅
Description: Get Details of the Booked Flight Along with its Status
Request Type: Get
Request URL: http://localhost:3000/api/BookedFlightDetails
Input: {
"PID": "XXX"
}
Response: {From, To, Flight_ID, Date_of_travel, Dep_time, Arr_time, Flight_Status}
Query:
select Origin_ID, Destination_ID, Date_of_travel, Dep_time, Arr_time, Flight_Status
from Flights Right Join Routes On Route = Route_ID
where Flight_ID in (select Flight from Tickets where PID = '1') AND Date_of_travel >= CURDATE();

Request No: 17 ✅
Description: Past Flights of the user
Request Type: Get
Request URL: http://localhost:3000/api/PastFlights
Input: {
"PID": "XXX"
}
Response: {From, To, Flight_ID, Date_of_travel}
Query: select Origin_ID, Destination_ID, Date_of_travel, Dep_time, Arr_time, Flight_Status
from Flights Right Join Routes On Route = Route_ID
where Flight_ID in (select Flight from Tickets where PID = '1') AND Date_of_travel < CURDATE();

----------------------------- Add New Requests Here ---------------------------------------------

Optional Rq:

1. Get Details of the Registered User
2. Edit User Details
