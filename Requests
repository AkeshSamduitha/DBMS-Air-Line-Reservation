# Request_No:
# Description: What the Rq Do
# Type: GET/POST/DELETE/UPDATE
# URL: lo
# Response: What is given in Response
# SQL_Query: SQL_query to Access DB

Request_No: 01âœ…ðŸ’ 
Description: Given a flight no, all passengers travelling in it (next immediate flight) below age 18, above age 18
Type: GET
URL: http://localhost:3000/admin/api/getPassengersByflight
Input: {"flight_ID": "F1"}
Response:{Above, Below}
SQL_Query: 
SELECT (SELECT COUNT(*) FROM tickets WHERE adult_or_child LIKE '%A%' AND flight = ?) as Above_18, (SELECT COUNT(*) FROM tickets WHERE adult_or_child LIKE '%C%'AND flight = ?) as Below_18;

Request_No: 02âœ…
Description: Given a date range, number of passengers travelling to a given destination
Type: GET
URL: http://localhost:3000/api/getPassengersByDestination
input:
{
"destination_ID": "JFK",
"From_Date": "2022-01-01",
"To_Date": "2023-01-31"
}
Response: {count}
SQL_Query: 
SELECT COUNT(*) AS passengers_count FROM tickets WHERE flight IN (SELECT flight_ID FROM flights WHERE (route IN (SELECT route_ID FROM routes WHERE destination_ID = ?) AND date_of_travel BETWEEN ? AND ?));

Request_No: 03âœ…
Description: Given a date range, number of bookings by each passenger type
Type: GET
URL: http://localhost:3000/api/getBookingsByPassengerType
input: 
{
"From_Date": "2022-01-01",
"To_Date": "2023-01-31"
}
Response: {passenger_type, count}
SQL_Query: 
SELECT (SELECT COUNT(*) FROM 
        tickets, users 
        WHERE users.PID = tickets.PID AND Time_of_booking BETWEEN ? AND ? AND user_type LIKE '%G%') AS Guests,
        (SELECT COUNT(*) 
        FROM tickets, users 
        WHERE users.PID = tickets.PID AND Time_of_booking BETWEEN ? AND ? AND user_type LIKE '%R%') AS Registered;

Request_No: 04 âœ…
Description: Given origin and destination, all past flights, status, passenger counts data
Type: GET
URL: http://localhost:3000/api/getPastflights
input: 
{
"origin_ID": "JFK",
"destination_ID": "LAX"
}
Response: {flight_ID, date_of_travel, flight_Status, count}
SQL_Query:
    SELECT flight_ID, airplane, date_of_travel, dep_time, arr_time, (seat_count-(tickets_RemainingB + tickets_RemainingE + tickets_RemainingP)) as passenger_count
    FROM (flights LEFT JOIN Airplanes_w_seasts 
    ON airplane = airplane_ID)
    WHERE route IN (SELECT route_ID
                    FROM routes
                    WHERE origin_ID = ? AND destination_ID = ? AND date_of_travel < CURDATE());

Drop view Airplanes_w_seasts;

Request_No: 05âœ…
Description: Total revenue generated by each Aircraft type
Type: GET
URL: http://localhost:3000/api/getrevenueByAircraftType
input: NONE
Response: {model, brand, revenue}
SQL_Query:
SELECT model_ID, model, brand, revenue
FROM flights LEFT JOIN (
    SELECT airplane_ID, model_ID, airplane_models.model, brand
    FROM airplanes LEFT JOIN airplane_models
    ON model_ID = airplanes.model) as A
ON airplane = airplane_ID
GROUP BY model_ID;

Request_No: 06 âœ…ðŸ’ 
Description: Login
Type: GET
URL: http://localhost:3000/auth/login
input:
{
Email: "Mr",
Password: "John",
}
Response: NONE
SQL_Query: SELECT * FROM users, registered_users WHERE email = ? AND password = ? AND users.PID = registered_users.PID LIMIT 1;

Request_No: 07âœ…ðŸ’ 
Description: Register
Type: POST
URL: http://localhost:3000/auth/Register
input:
{
Title: "Mr",
First_Name: "John",
Last_Name: "Doe",
Email: "Huu@mymail.com",
Telephone: "123",
Country: "USA",
Username: "John",
Password: "123",
Date_of_Birth: "YYYY-MM-DD",
Address: "123",
}
Response: No Response
SQL_Query: Call new_registred_user(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

Request_No: 08 âœ…ðŸ’ 
Description: When From, To and Date Range(From_Date,To_Date) is given then available flights will be shown to the user
Type: GET
URL: Http:/localhost:3000/api/getflights
Input:
{  
 "From": "Location01",  
 "To": "Location02",  
 "From_Date": "FromDate",
"To_Date": "ToDate"
}  
Response: {flight_ID, date_of_travel, dep_time, Arr_time, Tickets_remainingF, Tickets_remainingB, Tickets_remainingE, flight_Status }
SQL_Query:
SELECT flight_ID, date_of_travel, dep_time, Arr_time, Tickets_remainingP, Tickets_remainingB, Tickets_remainingE, flight_Status
FROM flights
WHERE route = (
    SELECT route_ID
    FROM routes
    WHERE origin_ID = ? AND destination_ID = ? AND date_of_travel BETWEEN ? AND ? AND date_of_travel > CURDATE()
    ORDER BY date_of_travel
) AND (Tickets_remainingP + Tickets_remainingB + Tickets_remainingE > 0);


Request_No: 09 âœ…ðŸ’ 
Description: Restricted Seats
Type: Get
URL: http://localhost:3000/api/AvailableSeats
input: {"flight_ID": "A1"}
Response: {Class, seat_ID}
SQL_Query:
    SELECT class, seat_ID
    FROM tickets
    WHERE flight = 'F1'
    ORDER BY class, seat_ID;

Request_No: 10 âœ…ðŸ’ 
Description: flight Booking
Type: Post
URL: http://localhost:3000/api/Bookflight
input: {
"flight_ID": "A1",
"Class": "F",
"seat_ID": "A1",
"PID": "123",
"Adult_or_Child": "A"}
Response: NONE
SQL_Query: CALL new_ticket(?, ?, ?, ?, ?);

Request_No: 11 âœ…ðŸ’ 
Description: Cancel Booking
Type: Post
URL: http://localhost:3000/api/CancelBooking
input:
{
"Ticket_ID": "xxxx"
}
Response: NONE
SQL_Query: CALL cancel_ticket(?);

Request_No: 12 âœ…ðŸ’ 
Description: Seat Price
Type: Get
URL: http://localhost:3000/api/SeatPrice
input: 
{
'PID': "11"
'route' : "R1"
'Class': "F"
}
response: {'Price': "100"}
SQL_Query: CALL ticket_price(?, ?, ?); //Function

Request_No: 13âœ…ðŸ’ 
Description: Guest User Login
Type: Post
URL: http://localhost:3000/api/GuestLogin
input:
{
Title: "Mr",
First_Name: "John",
Last_Name: "Doe",
Email: "Huu@mymail.com",
Telephone: "123",
Country: "USA",
}
Response: No response
SQL_Query: 
INSERT INTO users(title, first_Name, last_Name, email, telephone, country) VALUES (?, ?, ?, ?, ?, ?);

Request_No: 14âœ…ðŸ’ 
Description: Check flight Status
Type: Get
URL: http://localhost:3000/api/flightStatus
Input:
{
"flight_ID": "F1"
}
Response: {flight_Status}
SQL_Query: SELECT flight_Status FROM flights WHERE flight_ID = ?;

Request_No: 15 âœ…ðŸ’ 
Description: Get Destinations
Type: Get
URL: http://localhost:3000/api/Destinations
Input: None
Response: {Airport_code, Airport_name, Location}
Query: 
SELECT * FROM airports;


--------------REGISTERED USER REQUESTS-----------------------

Request_No: 16 âœ…ðŸ’ 
Description: Get Details of the Booked flight Along with its Status
Type: Get
URL: http://localhost:3000/registered/BookedflightDetails
Input: 
{
"PID": "XXX"
}
Response: {From, To, flight_ID, date_of_travel, dep_time, Arr_time, flight_Status}
Query:
    SELECT origin_ID, destination_ID, date_of_travel, dep_time, Arr_time, flight_Status
    FROM flights RIGHT JOIN routes ON route = route_ID
    WHERE flight_ID in (SELECT flight FROM Tickets WHERE PID = ?) AND date_of_travel >= CURDATE();

Request_No: 17âœ…ðŸ’ 
Description: Past flights of the user
Type: Get
URL: http://localhost:3000/registered/Pastflights
Input: 
{
"PID": "XXX"
}
Response: {From, To, flight_ID, date_of_travel}
Query: 
SELECT origin_ID, destination_ID, date_of_travel, dep_time, Arr_time, flight_Status
FROM flights RIGHT JOIN routes ON route = route_ID
WHERE flight_ID IN (SELECT flight FROM Tickets WHERE PID = ?) AND date_of_travel < CURDATE();

----------------------------- Add New Requests Here ---------------------------------------------

Optional Rq:

1. Get Details of the Registered User
2. Edit User Details


Request_NO: 
Description: Get registered user detail
Type: GET
URL: http://localhost:3000/registered/GetUserDetail
Input: NONE
Response: SELECT title, first_name, last_name, user_category, total_bookings, telephone, email, country, address, date_of_birth, username}
SQL_Query: 'SELECT title, first_name, last_name, (SELECT discription FROM user_categories WHERE category = user_category) AS user_category , total_bookings, telephone, email, country, address, date_of_birth, username FROM registered_users LEFT JOIN users USING(PID);'


